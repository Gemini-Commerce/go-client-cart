/*
Cart Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cart

import (
	"encoding/json"
	"fmt"
)

// ListCartsRequestFilterCartStatus the model 'ListCartsRequestFilterCartStatus'
type ListCartsRequestFilterCartStatus string

// List of ListCartsRequestFilterCartStatus
const (
	LISTCARTSREQUESTFILTERCARTSTATUS_UNKNOWN ListCartsRequestFilterCartStatus = "UNKNOWN"
	LISTCARTSREQUESTFILTERCARTSTATUS_ENABLED ListCartsRequestFilterCartStatus = "ENABLED"
	LISTCARTSREQUESTFILTERCARTSTATUS_DISABLED ListCartsRequestFilterCartStatus = "DISABLED"
)

// All allowed values of ListCartsRequestFilterCartStatus enum
var AllowedListCartsRequestFilterCartStatusEnumValues = []ListCartsRequestFilterCartStatus{
	"UNKNOWN",
	"ENABLED",
	"DISABLED",
}

func (v *ListCartsRequestFilterCartStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ListCartsRequestFilterCartStatus(value)
	for _, existing := range AllowedListCartsRequestFilterCartStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ListCartsRequestFilterCartStatus", value)
}

// NewListCartsRequestFilterCartStatusFromValue returns a pointer to a valid ListCartsRequestFilterCartStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewListCartsRequestFilterCartStatusFromValue(v string) (*ListCartsRequestFilterCartStatus, error) {
	ev := ListCartsRequestFilterCartStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ListCartsRequestFilterCartStatus: valid values are %v", v, AllowedListCartsRequestFilterCartStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ListCartsRequestFilterCartStatus) IsValid() bool {
	for _, existing := range AllowedListCartsRequestFilterCartStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ListCartsRequestFilterCartStatus value
func (v ListCartsRequestFilterCartStatus) Ptr() *ListCartsRequestFilterCartStatus {
	return &v
}

type NullableListCartsRequestFilterCartStatus struct {
	value *ListCartsRequestFilterCartStatus
	isSet bool
}

func (v NullableListCartsRequestFilterCartStatus) Get() *ListCartsRequestFilterCartStatus {
	return v.value
}

func (v *NullableListCartsRequestFilterCartStatus) Set(val *ListCartsRequestFilterCartStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableListCartsRequestFilterCartStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableListCartsRequestFilterCartStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListCartsRequestFilterCartStatus(val *ListCartsRequestFilterCartStatus) *NullableListCartsRequestFilterCartStatus {
	return &NullableListCartsRequestFilterCartStatus{value: val, isSet: true}
}

func (v NullableListCartsRequestFilterCartStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListCartsRequestFilterCartStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

