/*
Cart Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cart

import (
	"encoding/json"
	"fmt"
)

// CartCartStatus the model 'CartCartStatus'
type CartCartStatus string

// List of cartCartStatus
const (
	CARTCARTSTATUS_UNKNOWN CartCartStatus = "UNKNOWN"
	CARTCARTSTATUS_ACTIVE CartCartStatus = "ACTIVE"
	CARTCARTSTATUS_INACTIVE CartCartStatus = "INACTIVE"
)

// All allowed values of CartCartStatus enum
var AllowedCartCartStatusEnumValues = []CartCartStatus{
	"UNKNOWN",
	"ACTIVE",
	"INACTIVE",
}

func (v *CartCartStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CartCartStatus(value)
	for _, existing := range AllowedCartCartStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CartCartStatus", value)
}

// NewCartCartStatusFromValue returns a pointer to a valid CartCartStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCartCartStatusFromValue(v string) (*CartCartStatus, error) {
	ev := CartCartStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CartCartStatus: valid values are %v", v, AllowedCartCartStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CartCartStatus) IsValid() bool {
	for _, existing := range AllowedCartCartStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cartCartStatus value
func (v CartCartStatus) Ptr() *CartCartStatus {
	return &v
}

type NullableCartCartStatus struct {
	value *CartCartStatus
	isSet bool
}

func (v NullableCartCartStatus) Get() *CartCartStatus {
	return v.value
}

func (v *NullableCartCartStatus) Set(val *CartCartStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCartCartStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCartCartStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCartCartStatus(val *CartCartStatus) *NullableCartCartStatus {
	return &NullableCartCartStatus{value: val, isSet: true}
}

func (v NullableCartCartStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCartCartStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

