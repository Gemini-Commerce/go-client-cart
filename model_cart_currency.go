/*
Cart Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cart

import (
	"encoding/json"
	"fmt"
)

// CartCurrency Stands for Albania, not all ;-)
type CartCurrency string

// List of cartCurrency
const (
	CARTCURRENCY_XXX CartCurrency = "XXX"
	CARTCURRENCY_ALL CartCurrency = "ALL"
	CARTCURRENCY_DZD CartCurrency = "DZD"
	CARTCURRENCY_ARS CartCurrency = "ARS"
	CARTCURRENCY_AUD CartCurrency = "AUD"
	CARTCURRENCY_BSD CartCurrency = "BSD"
	CARTCURRENCY_BHD CartCurrency = "BHD"
	CARTCURRENCY_BDT CartCurrency = "BDT"
	CARTCURRENCY_AMD CartCurrency = "AMD"
	CARTCURRENCY_BBD CartCurrency = "BBD"
	CARTCURRENCY_BMD CartCurrency = "BMD"
	CARTCURRENCY_BTN CartCurrency = "BTN"
	CARTCURRENCY_BOB CartCurrency = "BOB"
	CARTCURRENCY_BWP CartCurrency = "BWP"
	CARTCURRENCY_BZD CartCurrency = "BZD"
	CARTCURRENCY_SBD CartCurrency = "SBD"
	CARTCURRENCY_BND CartCurrency = "BND"
	CARTCURRENCY_MMK CartCurrency = "MMK"
	CARTCURRENCY_BIF CartCurrency = "BIF"
	CARTCURRENCY_KHR CartCurrency = "KHR"
	CARTCURRENCY_CAD CartCurrency = "CAD"
	CARTCURRENCY_CVE CartCurrency = "CVE"
	CARTCURRENCY_KYD CartCurrency = "KYD"
	CARTCURRENCY_LKR CartCurrency = "LKR"
	CARTCURRENCY_CLP CartCurrency = "CLP"
	CARTCURRENCY_CNY CartCurrency = "CNY"
	CARTCURRENCY_COP CartCurrency = "COP"
	CARTCURRENCY_KMF CartCurrency = "KMF"
	CARTCURRENCY_CRC CartCurrency = "CRC"
	CARTCURRENCY_HRK CartCurrency = "HRK"
	CARTCURRENCY_CUP CartCurrency = "CUP"
	CARTCURRENCY_CZK CartCurrency = "CZK"
	CARTCURRENCY_DKK CartCurrency = "DKK"
	CARTCURRENCY_DOP CartCurrency = "DOP"
	CARTCURRENCY_SVC CartCurrency = "SVC"
	CARTCURRENCY_ETB CartCurrency = "ETB"
	CARTCURRENCY_ERN CartCurrency = "ERN"
	CARTCURRENCY_FKP CartCurrency = "FKP"
	CARTCURRENCY_FJD CartCurrency = "FJD"
	CARTCURRENCY_DJF CartCurrency = "DJF"
	CARTCURRENCY_GMD CartCurrency = "GMD"
	CARTCURRENCY_GIP CartCurrency = "GIP"
	CARTCURRENCY_GTQ CartCurrency = "GTQ"
	CARTCURRENCY_GNF CartCurrency = "GNF"
	CARTCURRENCY_GYD CartCurrency = "GYD"
	CARTCURRENCY_HTG CartCurrency = "HTG"
	CARTCURRENCY_HNL CartCurrency = "HNL"
	CARTCURRENCY_HKD CartCurrency = "HKD"
	CARTCURRENCY_HUF CartCurrency = "HUF"
	CARTCURRENCY_ISK CartCurrency = "ISK"
	CARTCURRENCY_INR CartCurrency = "INR"
	CARTCURRENCY_IDR CartCurrency = "IDR"
	CARTCURRENCY_IRR CartCurrency = "IRR"
	CARTCURRENCY_IQD CartCurrency = "IQD"
	CARTCURRENCY_ILS CartCurrency = "ILS"
	CARTCURRENCY_JMD CartCurrency = "JMD"
	CARTCURRENCY_JPY CartCurrency = "JPY"
	CARTCURRENCY_KZT CartCurrency = "KZT"
	CARTCURRENCY_JOD CartCurrency = "JOD"
	CARTCURRENCY_KES CartCurrency = "KES"
	CARTCURRENCY_KPW CartCurrency = "KPW"
	CARTCURRENCY_KRW CartCurrency = "KRW"
	CARTCURRENCY_KWD CartCurrency = "KWD"
	CARTCURRENCY_KGS CartCurrency = "KGS"
	CARTCURRENCY_LAK CartCurrency = "LAK"
	CARTCURRENCY_LBP CartCurrency = "LBP"
	CARTCURRENCY_LSL CartCurrency = "LSL"
	CARTCURRENCY_LRD CartCurrency = "LRD"
	CARTCURRENCY_LYD CartCurrency = "LYD"
	CARTCURRENCY_LTL CartCurrency = "LTL"
	CARTCURRENCY_MOP CartCurrency = "MOP"
	CARTCURRENCY_MWK CartCurrency = "MWK"
	CARTCURRENCY_MYR CartCurrency = "MYR"
	CARTCURRENCY_MVR CartCurrency = "MVR"
	CARTCURRENCY_MRO CartCurrency = "MRO"
	CARTCURRENCY_MUR CartCurrency = "MUR"
	CARTCURRENCY_MXN CartCurrency = "MXN"
	CARTCURRENCY_MNT CartCurrency = "MNT"
	CARTCURRENCY_MDL CartCurrency = "MDL"
	CARTCURRENCY_MAD CartCurrency = "MAD"
	CARTCURRENCY_OMR CartCurrency = "OMR"
	CARTCURRENCY_NAD CartCurrency = "NAD"
	CARTCURRENCY_NPR CartCurrency = "NPR"
	CARTCURRENCY_ANG CartCurrency = "ANG"
	CARTCURRENCY_AWG CartCurrency = "AWG"
	CARTCURRENCY_VUV CartCurrency = "VUV"
	CARTCURRENCY_NZD CartCurrency = "NZD"
	CARTCURRENCY_NIO CartCurrency = "NIO"
	CARTCURRENCY_NGN CartCurrency = "NGN"
	CARTCURRENCY_NOK CartCurrency = "NOK"
	CARTCURRENCY_PKR CartCurrency = "PKR"
	CARTCURRENCY_PAB CartCurrency = "PAB"
	CARTCURRENCY_PGK CartCurrency = "PGK"
	CARTCURRENCY_PYG CartCurrency = "PYG"
	CARTCURRENCY_PEN CartCurrency = "PEN"
	CARTCURRENCY_PHP CartCurrency = "PHP"
	CARTCURRENCY_QAR CartCurrency = "QAR"
	CARTCURRENCY_RUB CartCurrency = "RUB"
	CARTCURRENCY_RWF CartCurrency = "RWF"
	CARTCURRENCY_SHP CartCurrency = "SHP"
	CARTCURRENCY_STD CartCurrency = "STD"
	CARTCURRENCY_SAR CartCurrency = "SAR"
	CARTCURRENCY_SCR CartCurrency = "SCR"
	CARTCURRENCY_SLL CartCurrency = "SLL"
	CARTCURRENCY_SGD CartCurrency = "SGD"
	CARTCURRENCY_VND CartCurrency = "VND"
	CARTCURRENCY_SOS CartCurrency = "SOS"
	CARTCURRENCY_ZAR CartCurrency = "ZAR"
	CARTCURRENCY_SSP CartCurrency = "SSP"
	CARTCURRENCY_SZL CartCurrency = "SZL"
	CARTCURRENCY_SEK CartCurrency = "SEK"
	CARTCURRENCY_CHF CartCurrency = "CHF"
	CARTCURRENCY_SYP CartCurrency = "SYP"
	CARTCURRENCY_THB CartCurrency = "THB"
	CARTCURRENCY_TOP CartCurrency = "TOP"
	CARTCURRENCY_TTD CartCurrency = "TTD"
	CARTCURRENCY_AED CartCurrency = "AED"
	CARTCURRENCY_TND CartCurrency = "TND"
	CARTCURRENCY_UGX CartCurrency = "UGX"
	CARTCURRENCY_MKD CartCurrency = "MKD"
	CARTCURRENCY_EGP CartCurrency = "EGP"
	CARTCURRENCY_GBP CartCurrency = "GBP"
	CARTCURRENCY_TZS CartCurrency = "TZS"
	CARTCURRENCY_USD CartCurrency = "USD"
	CARTCURRENCY_UYU CartCurrency = "UYU"
	CARTCURRENCY_UZS CartCurrency = "UZS"
	CARTCURRENCY_WST CartCurrency = "WST"
	CARTCURRENCY_YER CartCurrency = "YER"
	CARTCURRENCY_TWD CartCurrency = "TWD"
	CARTCURRENCY_CUC CartCurrency = "CUC"
	CARTCURRENCY_ZWL CartCurrency = "ZWL"
	CARTCURRENCY_TMT CartCurrency = "TMT"
	CARTCURRENCY_GHS CartCurrency = "GHS"
	CARTCURRENCY_VEF CartCurrency = "VEF"
	CARTCURRENCY_SDG CartCurrency = "SDG"
	CARTCURRENCY_UYI CartCurrency = "UYI"
	CARTCURRENCY_RSD CartCurrency = "RSD"
	CARTCURRENCY_MZN CartCurrency = "MZN"
	CARTCURRENCY_AZN CartCurrency = "AZN"
	CARTCURRENCY_RON CartCurrency = "RON"
	CARTCURRENCY_CHE CartCurrency = "CHE"
	CARTCURRENCY_CHW CartCurrency = "CHW"
	CARTCURRENCY_TRY CartCurrency = "TRY"
	CARTCURRENCY_XAF CartCurrency = "XAF"
	CARTCURRENCY_XCD CartCurrency = "XCD"
	CARTCURRENCY_XOF CartCurrency = "XOF"
	CARTCURRENCY_XPF CartCurrency = "XPF"
	CARTCURRENCY_XBA CartCurrency = "XBA"
	CARTCURRENCY_XBB CartCurrency = "XBB"
	CARTCURRENCY_XBC CartCurrency = "XBC"
	CARTCURRENCY_XBD CartCurrency = "XBD"
	CARTCURRENCY_XAU CartCurrency = "XAU"
	CARTCURRENCY_XDR CartCurrency = "XDR"
	CARTCURRENCY_XAG CartCurrency = "XAG"
	CARTCURRENCY_XPT CartCurrency = "XPT"
	CARTCURRENCY_XPD CartCurrency = "XPD"
	CARTCURRENCY_XUA CartCurrency = "XUA"
	CARTCURRENCY_ZMW CartCurrency = "ZMW"
	CARTCURRENCY_SRD CartCurrency = "SRD"
	CARTCURRENCY_MGA CartCurrency = "MGA"
	CARTCURRENCY_COU CartCurrency = "COU"
	CARTCURRENCY_AFN CartCurrency = "AFN"
	CARTCURRENCY_TJS CartCurrency = "TJS"
	CARTCURRENCY_AOA CartCurrency = "AOA"
	CARTCURRENCY_BYR CartCurrency = "BYR"
	CARTCURRENCY_BGN CartCurrency = "BGN"
	CARTCURRENCY_CDF CartCurrency = "CDF"
	CARTCURRENCY_BAM CartCurrency = "BAM"
	CARTCURRENCY_EUR CartCurrency = "EUR"
	CARTCURRENCY_MXV CartCurrency = "MXV"
	CARTCURRENCY_UAH CartCurrency = "UAH"
	CARTCURRENCY_GEL CartCurrency = "GEL"
	CARTCURRENCY_BOV CartCurrency = "BOV"
	CARTCURRENCY_PLN CartCurrency = "PLN"
	CARTCURRENCY_BRL CartCurrency = "BRL"
	CARTCURRENCY_CLF CartCurrency = "CLF"
	CARTCURRENCY_XSU CartCurrency = "XSU"
	CARTCURRENCY_USN CartCurrency = "USN"
)

// All allowed values of CartCurrency enum
var AllowedCartCurrencyEnumValues = []CartCurrency{
	"XXX",
	"ALL",
	"DZD",
	"ARS",
	"AUD",
	"BSD",
	"BHD",
	"BDT",
	"AMD",
	"BBD",
	"BMD",
	"BTN",
	"BOB",
	"BWP",
	"BZD",
	"SBD",
	"BND",
	"MMK",
	"BIF",
	"KHR",
	"CAD",
	"CVE",
	"KYD",
	"LKR",
	"CLP",
	"CNY",
	"COP",
	"KMF",
	"CRC",
	"HRK",
	"CUP",
	"CZK",
	"DKK",
	"DOP",
	"SVC",
	"ETB",
	"ERN",
	"FKP",
	"FJD",
	"DJF",
	"GMD",
	"GIP",
	"GTQ",
	"GNF",
	"GYD",
	"HTG",
	"HNL",
	"HKD",
	"HUF",
	"ISK",
	"INR",
	"IDR",
	"IRR",
	"IQD",
	"ILS",
	"JMD",
	"JPY",
	"KZT",
	"JOD",
	"KES",
	"KPW",
	"KRW",
	"KWD",
	"KGS",
	"LAK",
	"LBP",
	"LSL",
	"LRD",
	"LYD",
	"LTL",
	"MOP",
	"MWK",
	"MYR",
	"MVR",
	"MRO",
	"MUR",
	"MXN",
	"MNT",
	"MDL",
	"MAD",
	"OMR",
	"NAD",
	"NPR",
	"ANG",
	"AWG",
	"VUV",
	"NZD",
	"NIO",
	"NGN",
	"NOK",
	"PKR",
	"PAB",
	"PGK",
	"PYG",
	"PEN",
	"PHP",
	"QAR",
	"RUB",
	"RWF",
	"SHP",
	"STD",
	"SAR",
	"SCR",
	"SLL",
	"SGD",
	"VND",
	"SOS",
	"ZAR",
	"SSP",
	"SZL",
	"SEK",
	"CHF",
	"SYP",
	"THB",
	"TOP",
	"TTD",
	"AED",
	"TND",
	"UGX",
	"MKD",
	"EGP",
	"GBP",
	"TZS",
	"USD",
	"UYU",
	"UZS",
	"WST",
	"YER",
	"TWD",
	"CUC",
	"ZWL",
	"TMT",
	"GHS",
	"VEF",
	"SDG",
	"UYI",
	"RSD",
	"MZN",
	"AZN",
	"RON",
	"CHE",
	"CHW",
	"TRY",
	"XAF",
	"XCD",
	"XOF",
	"XPF",
	"XBA",
	"XBB",
	"XBC",
	"XBD",
	"XAU",
	"XDR",
	"XAG",
	"XPT",
	"XPD",
	"XUA",
	"ZMW",
	"SRD",
	"MGA",
	"COU",
	"AFN",
	"TJS",
	"AOA",
	"BYR",
	"BGN",
	"CDF",
	"BAM",
	"EUR",
	"MXV",
	"UAH",
	"GEL",
	"BOV",
	"PLN",
	"BRL",
	"CLF",
	"XSU",
	"USN",
}

func (v *CartCurrency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CartCurrency(value)
	for _, existing := range AllowedCartCurrencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CartCurrency", value)
}

// NewCartCurrencyFromValue returns a pointer to a valid CartCurrency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCartCurrencyFromValue(v string) (*CartCurrency, error) {
	ev := CartCurrency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CartCurrency: valid values are %v", v, AllowedCartCurrencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CartCurrency) IsValid() bool {
	for _, existing := range AllowedCartCurrencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cartCurrency value
func (v CartCurrency) Ptr() *CartCurrency {
	return &v
}

type NullableCartCurrency struct {
	value *CartCurrency
	isSet bool
}

func (v NullableCartCurrency) Get() *CartCurrency {
	return v.value
}

func (v *NullableCartCurrency) Set(val *CartCurrency) {
	v.value = val
	v.isSet = true
}

func (v NullableCartCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableCartCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCartCurrency(val *CartCurrency) *NullableCartCurrency {
	return &NullableCartCurrency{value: val, isSet: true}
}

func (v NullableCartCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCartCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

