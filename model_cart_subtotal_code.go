/*
Cart Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cart

import (
	"encoding/json"
	"fmt"
)

// CartSubtotalCode the model 'CartSubtotalCode'
type CartSubtotalCode string

// List of CartSubtotalCode
const (
	CARTSUBTOTALCODE_UNKNOWN CartSubtotalCode = "UNKNOWN"
	CARTSUBTOTALCODE_PAYMENT CartSubtotalCode = "PAYMENT"
	CARTSUBTOTALCODE_SHIPMENT CartSubtotalCode = "SHIPMENT"
	CARTSUBTOTALCODE_TAX CartSubtotalCode = "TAX"
	CARTSUBTOTALCODE_ITEMS CartSubtotalCode = "ITEMS"
	CARTSUBTOTALCODE_DISCOUNT CartSubtotalCode = "DISCOUNT"
)

// All allowed values of CartSubtotalCode enum
var AllowedCartSubtotalCodeEnumValues = []CartSubtotalCode{
	"UNKNOWN",
	"PAYMENT",
	"SHIPMENT",
	"TAX",
	"ITEMS",
	"DISCOUNT",
}

func (v *CartSubtotalCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CartSubtotalCode(value)
	for _, existing := range AllowedCartSubtotalCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CartSubtotalCode", value)
}

// NewCartSubtotalCodeFromValue returns a pointer to a valid CartSubtotalCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCartSubtotalCodeFromValue(v string) (*CartSubtotalCode, error) {
	ev := CartSubtotalCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CartSubtotalCode: valid values are %v", v, AllowedCartSubtotalCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CartSubtotalCode) IsValid() bool {
	for _, existing := range AllowedCartSubtotalCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CartSubtotalCode value
func (v CartSubtotalCode) Ptr() *CartSubtotalCode {
	return &v
}

type NullableCartSubtotalCode struct {
	value *CartSubtotalCode
	isSet bool
}

func (v NullableCartSubtotalCode) Get() *CartSubtotalCode {
	return v.value
}

func (v *NullableCartSubtotalCode) Set(val *CartSubtotalCode) {
	v.value = val
	v.isSet = true
}

func (v NullableCartSubtotalCode) IsSet() bool {
	return v.isSet
}

func (v *NullableCartSubtotalCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCartSubtotalCode(val *CartSubtotalCode) *NullableCartSubtotalCode {
	return &NullableCartSubtotalCode{value: val, isSet: true}
}

func (v NullableCartSubtotalCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCartSubtotalCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

