/*
Cart Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cart

import (
	"encoding/json"
)

// checks if the CartCartSubtotal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CartCartSubtotal{}

// CartCartSubtotal struct for CartCartSubtotal
type CartCartSubtotal struct {
	Code *CartSubtotalCode `json:"code,omitempty"`
	Value *CartMoney `json:"value,omitempty"`
}

// NewCartCartSubtotal instantiates a new CartCartSubtotal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCartCartSubtotal() *CartCartSubtotal {
	this := CartCartSubtotal{}
	var code CartSubtotalCode = CARTSUBTOTALCODE_UNKNOWN
	this.Code = &code
	return &this
}

// NewCartCartSubtotalWithDefaults instantiates a new CartCartSubtotal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCartCartSubtotalWithDefaults() *CartCartSubtotal {
	this := CartCartSubtotal{}
	var code CartSubtotalCode = CARTSUBTOTALCODE_UNKNOWN
	this.Code = &code
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CartCartSubtotal) GetCode() CartSubtotalCode {
	if o == nil || IsNil(o.Code) {
		var ret CartSubtotalCode
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartCartSubtotal) GetCodeOk() (*CartSubtotalCode, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CartCartSubtotal) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given CartSubtotalCode and assigns it to the Code field.
func (o *CartCartSubtotal) SetCode(v CartSubtotalCode) {
	o.Code = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *CartCartSubtotal) GetValue() CartMoney {
	if o == nil || IsNil(o.Value) {
		var ret CartMoney
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartCartSubtotal) GetValueOk() (*CartMoney, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *CartCartSubtotal) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given CartMoney and assigns it to the Value field.
func (o *CartCartSubtotal) SetValue(v CartMoney) {
	o.Value = &v
}

func (o CartCartSubtotal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CartCartSubtotal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableCartCartSubtotal struct {
	value *CartCartSubtotal
	isSet bool
}

func (v NullableCartCartSubtotal) Get() *CartCartSubtotal {
	return v.value
}

func (v *NullableCartCartSubtotal) Set(val *CartCartSubtotal) {
	v.value = val
	v.isSet = true
}

func (v NullableCartCartSubtotal) IsSet() bool {
	return v.isSet
}

func (v *NullableCartCartSubtotal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCartCartSubtotal(val *CartCartSubtotal) *NullableCartCartSubtotal {
	return &NullableCartCartSubtotal{value: val, isSet: true}
}

func (v NullableCartCartSubtotal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCartCartSubtotal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


